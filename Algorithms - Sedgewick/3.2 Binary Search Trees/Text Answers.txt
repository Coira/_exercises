3.2 Binary Search Trees

3.2.1

          E(6)
         /   \
        /     \
       /       \
     A(1)      S(7)
              /   \
             /     \
            /       \
          Q(4)      Y(3)
          /         /
         /         /
        /         /
     I(9)        U(5)
       \        /
        \      /
         \    /
      O(10)  T(8)
         /
        /
       /
     N(11)
     
It uses a total of 28 compares.

3.2.2
These orderings produce worst-case trees.
XSRHECA
ACEHRSX
XRSEHAC
HRSXECA
HECARSX

3.2.3
These orderings produce best-case trees.
HCAESRX
HSRXCAE
HSRXCEA
HCSAERX
HSCAERX

3.2.4
d. Because of where 8 is.

3.2.5
Decreasing order, so that the keys that are accessed most are at the top of the tree,
and the keys that are accessed least will be at the bottom of the tree.
Therefore, the keys that are accessed the most will be faster to reach.

