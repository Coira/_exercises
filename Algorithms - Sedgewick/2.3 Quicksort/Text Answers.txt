Exercise 2.3.1

v = a[0] = E

i  j   0  1  2  3  4  5  6  7  8  9  10 11
0  12  E  A  S  Y  Q  U  E  S  T  I  O  N
2  6   E  A  E  Y  Q  U  S  S  T  I  O  N
12 2   E  A  E  Y  Q  U  S  S  T  I  O  N  // break
       E  A  E  Y  Q  U  S  S  T  I  O  N  // exch(a, lo, j);

Exercise 2.3.2

lo  j   hi  0   1   2   3   4   5   6   7   8   9   10  11
            E   A   S   Y   Q   U   E   S   T   I   O   N
0   2   1   E   A   E   Y   Q   U   S   S   T   I   O   N
0   1   1	A   E   E   Y   Q   U   S   S   T   I   O   N
0       0   A   E   E   Y   Q   U   S   S   T   I   O   N  // subarray size 1
3   11  11  A   E   E   N   Q   U   S   S   T   I   O   Y
3   4   10  A   E   E   I   N   U   S   S   T   Q   O   Y
3       3   A   E   E   I   N   U   S   S   T   Q   O   Y  // subarray size 1
5   10  10  A   E   E   I   N   O   S   S   T   Q   U   Y
5   5   9   A   E   E   I   N   O   S   S   T   Q   U   Y
6   7   9   A   E   E   I   N   O   Q   S   T   S   U   Y
6       6   A   E   E   I   N   O   Q   S   T   S   U   Y  // subarray size 1
8   9   9   A   E   E   I   N   O   Q   S   S   T   U   Y
8       8   A   E   E   I   N   O   Q   S   S   T   U   Y  // subarray size 1

Exercise 2.3.3
lg(N) times, as this is the maximum number of swaps it takes to get an element into the correct position.

Exercise 2.3.4
Max number of compares when partitions are uneven, e.g. when lowest element or highest element is partition.
Max compare arrays:
0123456789
0123456798
9876543210
0912345678
9012345678
0198765432

Exercise 2.3.5

Rather than using 3-way partitioning, we can make use of the fact that there are only 2 values.
Store the minimum value and use that as a pivot.
It will take at most N compares to find the min, and N compares for the sort.
We also avoid any redundant exchanges, as each swap moves 2 elements into the correct order, and we never swap two values that are equal (which would occasionally happen with 3-way quicksort).

    public static void sort(Comparable[] a) {

        //two values in array, min holds the smallest of the two
        Comparable min = a[0];
        int i = 0;
        while (equals(a[++i], min))
            ;
        if (less(a[i], min))
            min = a[i];

        // scan left, scan right, swap out of order elements
        int lt = 0;
        int gt = a.length-1;
        while (true) {
            while (equals(a[lt], min))
                lt++;
            while (!equals(a[gt], min))
                gt--;
            if (lt >= gt) break;
            exch(a, lt, gt);
        }
    }
	
2.3.8
As the pivot will always be the median value, the array will always be split in half. Therefore the number of compares will be O(Nlg(N))

2.3.9
When there are just 2 or 3 distinct keys, for large arrays especially, many subarrays will have only a single distinct key, and there will be a lot of redundant partitioning.

2.3.12

lt   i    gt   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
----------------------------------------------
0    1    15   B A B A B A B A A C A D A B R A
1    2    15   A B B A B A B A A C A D A B R A
1    3    15   A B B A B A B A A C A D A B R A
2    4    15   A A B B B A B A A C A D A B R A
2    5    15   A A B B B A B A A C A D A B R A
3    6    15   A A A B B B B A A C A D A B R A
3    7    15   A A A B B B B A A C A D A B R A
4    8    15   A A A A B B B B A C A D A B R A
5    9    15   A A A A A B B B B C A D A B R A
5    9    14   A A A A A B B B B A A D A B R C
6    10   14   A A A A A A B B B B A D A B R C
7    11   14   A A A A A A A B B B B D A B R C
7    11   13   A A A A A A A B B B B R A B D C
7    11   12   A A A A A A A B B B B B A R D C
7    12   12   A A A A A A A B B B B B A R D C
0    1    7    A A A A A A A A B B B B B R D C
0    2    7    A A A A A A A A B B B B B R D C
0    3    7    A A A A A A A A B B B B B R D C
0    4    7    A A A A A A A A B B B B B R D C
0    5    7    A A A A A A A A B B B B B R D C
0    6    7    A A A A A A A A B B B B B R D C
0    7    7    A A A A A A A A B B B B B R D C
13   14   15   A A A A A A A A B B B B B R D C
14   15   15   A A A A A A A A B B B B B D R C
13   14   14   A A A A A A A A B B B B B D C R

2.3.13
The best and average cases will be O(lgN) as we can do no better than splitting the array in half.
Worst case will be O(N) as in this case we use a min or max value as the pivot and the array's two halves are uneven.

2.3.15
1. Pick a bolt at random
2. Compare each nut with that bolt
	2a. If the nut is smaller than the bolt place this in one pile
	2b. If the nut is larger than the bolt place it in another pile
	2c. If the nut is the right size, put it aside somewhere
3. Once all the nuts have been placed into two piles, take the right-sized nut and compare each bolt with that nut, making two piles, larger and smaller.
4. You will now have
	a. 1 pile of "smaller" nuts and 1 pile of "smaller" bolts
	b. 1 nut and 1 bolt that match
	c. 1 pile of "larger" nuts and 1 piles of "larger" bolts
5. Pick a bolt at random from the smaller pile.
6. Compare all the nuts from the smaller pile with that bolt, making another 2 piles, plus a nut and bolt that match.
7. Repeat until all the nuts and bolts match, and then do the same for all the other piles.

2.3.18
Doubling tests for M3Quick vs Quick (for 1000 iterations)

  N       |  M3Quick  |  Quick  |  Ratio M3:Quick
-------------------------------------------------
 1000	  |  0.163    |  0.173  |  1.1
 2000     |  0.267    |  0.318  |  1.2
 4000     |  0.534    |  0.623  |  1.2
 8000     |  1.102    |  1.447  |  1.3
 16000    |  2.364    |  3.375  |  1.4
 32000    |  5.292    |  7.624  |  1.4
 64000    | 11.520    | 16.632  |  1.4

Approximately doubles in time when number of items doubles.
  


