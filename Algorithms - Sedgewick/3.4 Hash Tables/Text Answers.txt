3.4 Hash Tables

3.4.1

0:  (U,5) --> (A,1)
1:  (Q,4)
2:
3:  (N,9) --> (I,7) --> (S,2)
4:  (O,8) --> (T,6) --> (Y,3) --> (E,0)

3.4.5

Sure it's legal, but it's not very effective; every item will have the same hash and will be placed in the same bucket.

3.4.10

For M = 16
0: A                     8:  Y
1: Q                     9:  I
2: T                     10: O
3:                       11:                     
4:                       12: E
5:                       13: U
6: S                     14:
7:                       15: N

For M = 10
0: A                     5: Y
1: U                     6: Q
2: I                     7: O
3: N                     8: S
4: E                     9: T

3.4.11

M = 4
E:0, A:0
0: E                     2:
1: A                     3:

M = 8
E:4, A:0, S:6, Y:0
0: A                     4: E
1: Y                     5:
2:                       6: S
3:                       7:

M = 16
A:0, Y:8, E:12, S:6, Q:0, U:12, T:1, I:8
0: A                     8:  Y
1: Q                     9:  I
2: T                     10: 
3:                       11:
4:                       12: E
5:                       13: U
6: S                     14:
7:                       15:

M = 32
A:0, Q:16, T:17, S:6, Y:8, I:24, E:12, U:28, O:26, N:15
0:  A                    16: Q
1:                       17: T
2:                       18: 
3:                       19:
4:                       20: 
5:                       21:
6:  S                    22:
7:                       23:
8:  Y                    24: I
9:                       25:
10:                      26: O
11:                      27:
12: E                    28: U
13:                      29:
14:                      30:
15: N                    31:

3.4.12

None of the given results could possibly occur.

Minimum and maximum number of probes is 12. 
There are three keys with hash 4 (keys D, E and F); whichever order we put them in they will end up in positions 4,5 and 6. 
There are two keys with hash 0 (B and C), so these will end up in positions 0 and 1.
There are two keys with hash 2 (A and G), which will end up in positions 2 and 3.
As the groups of keys end up in distinct positions, and never interfer with the other groups, there is no way of increasing the number of probes.

As an example, take the order ABCDEFG
A: hash=2, probes position 2, inserts here (number of probes = 1)
B: hash=0, probes position 0, inserts here (number of probes = 1)
C: hash=0, probes 0 then 1, inserts at 1 (number of probes = 2)
D: hash=4, probes 4, inserts here (number of probes = 1)
E: hash=4, probes 4 then 5, inserts at 5 (number of probes = 2)
F: hash=4, probes 4 then 5 then 6, inserts at 6 (number of probes = 3)
G: hash=2, probes 2 then 3, inserts at 3 (number of probes = 2)

Total number of probes = 1 + 1 + 2 + 1 + 2 + 3 + 2 = 12

3.4.13
a. and c.) We will have a long cluster of N keys and when we search 
we will need to check all N keys.

3.4.14
None, if the hash function is equally likely to hash to each table position, we will not have any long clusters of keys (unless we are really unlucky).

3.4.15

Let's assume that we start with a table of size 2. When the table is half full we create a new table that is twice the size, and rehash and reinsert all elements already in the table. We then resume adding more elements to the table.
The worst-case scenario is where all items hash to the same key every single time, so the maximum number of probes are performed for each insertion, both during insert and resize.
When the number of keys N is a power of two we can predict how many probes will be needed. This assumes that resize happens as in the code given, for example, if the table size is 8 we resize when inserting the 5th key.
Given the string "ABCDEFGHIJKLMNOP" and a hash function that always returns the same hash value (e.g. the hash function from Exercise 3.4.5), and N characters from the string above, we can see how many probes are used. Let M be the table size, which starts at M=2.

N=2: A inserted, takes 1 probe
     Resize, "A" re-inserted, takes 1 probe. M is now 4.
     B inserted, takes 2 probes
     Total: "A":      1
            Resize: + 1
            "B":    + 2
                  =  1 + (1+2) + 3
            
N=3:
    A inserted, 1 probe
    Resize, "A" re-inserted, 1 probe      (M=4)
    B inserted, 2 probes
    Resize, "AB" re-inserted, 1+2 probes  (M=8)
    C inserted, 3 probes
    Total: "A":      1
           Resize: + 1
           "B":    + 2
           Resize: + 1 + 2
           "C":    + 3
                 = 1 + (1+2) + (1+2+3)
                 = 10

N=4:
    As N=3 plus
    D inserted, 4 probes
    Total: [From N=3]:    1 + (1+2) + (1+2+3)
                  "D":  + 4
                      = 1 + (1+2) + (1+2+3+4)
                      = 14
                      
And so forth. For example, when N=8, then 
total number of probes = 1 + (1+2) + (1+2+3+4) + (1+2+3+4+5+6+7+8).

As an aside, note that 1+2+3+...+N = (N+1)*(N/2).

Taking N=8 as an example again, notice that the sum can be written thus:
(8+1)(8/2) + (4+1)(4/2) + (2+1)(2/2) + (1+1)(1/2) = 50.
Or even
((8/1)+1)(8/2) + ((8/2)+1)(8/4) + ((8/8)+1)(8/16)) = 50.
Note that the denominators can all be represented as powers of 2, e.g. 16=2^4.
Generalising for N (as long as N is a power of 2):

Probes = ((N/(2^0))+1)(N/(2^1)) + ((N/(2^1))+1)(N/(2^2)) + ((N/(2^2))+1)(N/(2^3)) + ... + ((N/N)+1)(N/(2N))

Which gives a summation that can be reduced to the equation
                  (1/3)(N+2)(2N-1)
(See the separate image file 3.4.15a.png for the summation).

So when we insert 16 keys, we need (1/3)(16+2)(2*16-1) = 186 probes.

Further to this, we can also calculate the number of probes regardless of N being a power of two by, for example, noticing that when N=5, total number of probes = 1 + (1+2) + (1+2+3+4) + (1+2+3+4+5+6+7+8) - (6+7+8). 
However the equations are a little too messy to type in here as it involves logs and ceil. See the separate image file 3.4.15b.png or if you use emacs and latex the file 3.4.15.org to see the equation's final form. 


3.4.17

Index:  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 
  Key:  P  M        A  H  S  L       E           R  X 
Value: 10  9        8  5  0  11      12          3  7







