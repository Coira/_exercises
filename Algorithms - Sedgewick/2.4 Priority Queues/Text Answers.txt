ABCDEFGHIJKLMNOPQRSTUVWXYZ

2.4.1
RRPOTYIIUQE

2.4.2
It would not be constant time as, each time you've popped the maximum 
off the stack/queue, you'd have to then iterate thought the stack/queue 
looking for the next maximum, which itself would take O(N) 
time per item, and O(N^2) to pop off all the items in order.

2.4.3

                   | insert | max  | delMax
				   -----------------------
Unordered Array PQ | O(1)   | O(N) | O(N)
Ordered Array PQ   | O(N)   | O(1) | O(1)
Unordered LL PQ    | O(1)   | O(N) | O(N)
Ordered LL PQ      | O(N)   | O(1) | O(1)   


2.4.4
Yes, the maximum value sits at the root.

2.4.5
YTUSQNEASIOE

2.4.6
RPIO  // insert PRIO
POI   // del
RPIO  // insert R
POI   // del * 2
OII   // insert I
II    // del
TII   // insert T
II    // del
YII   // insert Y
      // del * 3
UQE   // insert QUE
      // del * 3
U     // insert U
      // del
E     // insert E

2.4.7
For a 31-key tree, the 2nd largest item can appear in positions 2 & 3.
The 3rd largest at positions 2,3,4,5,6,7.
The 4th largest at positions 4,5,6,7,8,9,10,11,12,13,14.

2.4.8
For a 31-key tree, the 2nd *smallest* item can appear in 
positions 16 to 31.
The 3rd smallest in positions 8 to 31.
The 4th smallest in positions 4 to 31.
	  
2.4.10
Parent of k: floor(k/2)-1
Left and right children: 2k+1, 2k+2

2.4.11
Unordered array, as insertion will be constant time (apart from when we need to resize the array).

2.4.12
A heap would be best. An unordered array would take O(n) time to find the max. Although a heap and ordered array would take constant time to find-max, we would still need to reorganise the heap or array when we insert an item, even if the number of insertions is small, and a heap would be more efficient.

2.4.13
sink(ink k) {
  while (2*k < N) {  // so we can remove j < N
    int j = 2*k;
    if (less(j, j+1)) j++;
    if (!less(k, j)) break;
    exch(k, j);
    k = j;
  }
  // extra check needed for when j == 2 and N == 2
  // as we may have left the heap out of order during delMax()
  if (N == 2 && less(1, 2)) {
    exch(2, 1);
  }
}

2.4.14
There will be 1 exchange to move the last element to the top (which fills in the hole that delMax() left). Then sink will take floor(lgN)-2 exchanges to move that element into the right spot. lgN is the number of levels the heap has, as the element already starts at the top, and it will need to be sunk to the second to last layer. Therefore, delMax() will take a minimum of floor(lgN)-1 exchanges.
"OMNKJILBAEDCFGH" uses 3 exchanges for a single delMax().
If we performed another two delMax() then each would need 3 more exchanges, for a total of 9 exchanges for 3 delMax()s.

2.4.16
If the array is already sorted, heapsort will use the maximum number of compares. During delMin() (or delMax()), once the minimum value has been removed, the next minimum value will be placed at the root, and then will need to be sunk to the bottom layer. 
If the array wasn't already sorted (e.g. the array is in reverse order), the value that replaces the root node might only have to go to the second to last layer, taking fewer compares to do so.
Maximum number of compares: [1,2,3,...,30,31,32]
Minimum number of compares: [32,31,30,...,3,2,1]

2.4.18
Yes, insert() with an item larger than all items, then delMax() will result in an identical heap.

2.4.21
Stack:
Give each element a key, based on N. E.g. the first element pushed onto the heap will have a key 1, the second element a key 2, etc. Use a max-value heap. Remove items using its key.
Queue:
As above, but use a min-value heap.
Randomized queue:
Use a randomised key.

